// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package settingsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SettingsServiceClient is the client API for SettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettingsServiceClient interface {
	// Gets a single setting and its stored value
	Get(ctx context.Context, in *SettingRequest, opts ...grpc.CallOption) (*SettingResponse, error)
	// Pulls all setting values that match some criteria in the name & any other setting properties
	List(ctx context.Context, in *SettingRequest, opts ...grpc.CallOption) (SettingsService_ListClient, error)
	Set(ctx context.Context, in *SettingUpdateRequest, opts ...grpc.CallOption) (*SettingResponse, error)
}

type settingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingsServiceClient(cc grpc.ClientConnInterface) SettingsServiceClient {
	return &settingsServiceClient{cc}
}

func (c *settingsServiceClient) Get(ctx context.Context, in *SettingRequest, opts ...grpc.CallOption) (*SettingResponse, error) {
	out := new(SettingResponse)
	err := c.cc.Invoke(ctx, "/apis.SettingsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) List(ctx context.Context, in *SettingRequest, opts ...grpc.CallOption) (SettingsService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &SettingsService_ServiceDesc.Streams[0], "/apis.SettingsService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &settingsServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SettingsService_ListClient interface {
	Recv() (*SettingResponse, error)
	grpc.ClientStream
}

type settingsServiceListClient struct {
	grpc.ClientStream
}

func (x *settingsServiceListClient) Recv() (*SettingResponse, error) {
	m := new(SettingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *settingsServiceClient) Set(ctx context.Context, in *SettingUpdateRequest, opts ...grpc.CallOption) (*SettingResponse, error) {
	out := new(SettingResponse)
	err := c.cc.Invoke(ctx, "/apis.SettingsService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingsServiceServer is the server API for SettingsService service.
// All implementations must embed UnimplementedSettingsServiceServer
// for forward compatibility
type SettingsServiceServer interface {
	// Gets a single setting and its stored value
	Get(context.Context, *SettingRequest) (*SettingResponse, error)
	// Pulls all setting values that match some criteria in the name & any other setting properties
	List(*SettingRequest, SettingsService_ListServer) error
	Set(context.Context, *SettingUpdateRequest) (*SettingResponse, error)
	mustEmbedUnimplementedSettingsServiceServer()
}

// UnimplementedSettingsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSettingsServiceServer struct {
}

func (UnimplementedSettingsServiceServer) Get(context.Context, *SettingRequest) (*SettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSettingsServiceServer) List(*SettingRequest, SettingsService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSettingsServiceServer) Set(context.Context, *SettingUpdateRequest) (*SettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedSettingsServiceServer) mustEmbedUnimplementedSettingsServiceServer() {}

// UnsafeSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingsServiceServer will
// result in compilation errors.
type UnsafeSettingsServiceServer interface {
	mustEmbedUnimplementedSettingsServiceServer()
}

func RegisterSettingsServiceServer(s grpc.ServiceRegistrar, srv SettingsServiceServer) {
	s.RegisterService(&SettingsService_ServiceDesc, srv)
}

func _SettingsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.SettingsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).Get(ctx, req.(*SettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SettingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SettingsServiceServer).List(m, &settingsServiceListServer{stream})
}

type SettingsService_ListServer interface {
	Send(*SettingResponse) error
	grpc.ServerStream
}

type settingsServiceListServer struct {
	grpc.ServerStream
}

func (x *settingsServiceListServer) Send(m *SettingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SettingsService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.SettingsService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).Set(ctx, req.(*SettingUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SettingsService_ServiceDesc is the grpc.ServiceDesc for SettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.SettingsService",
	HandlerType: (*SettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SettingsService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _SettingsService_Set_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _SettingsService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "settings.proto",
}
