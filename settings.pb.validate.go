// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: settings.proto

package settingsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Setting with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Setting) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 2 {
		return SettingValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
	}

	if m.GetObject() != "" {

		if utf8.RuneCountInString(m.GetObject()) < 2 {
			return SettingValidationError{
				field:  "Object",
				reason: "value length must be at least 2 runes",
			}
		}

	}

	if m.GetObjectId() != "" {

		if l := utf8.RuneCountInString(m.GetObjectId()); l < 3 || l > 40 {
			return SettingValidationError{
				field:  "ObjectId",
				reason: "value length must be between 3 and 40 runes, inclusive",
			}
		}

		if !_Setting_ObjectId_Pattern.MatchString(m.GetObjectId()) {
			return SettingValidationError{
				field:  "ObjectId",
				reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
			}
		}

	}

	if m.GetLang() != "" {

		if utf8.RuneCountInString(m.GetLang()) < 2 {
			return SettingValidationError{
				field:  "Lang",
				reason: "value length must be at least 2 runes",
			}
		}

	}

	if utf8.RuneCountInString(m.GetModule()) < 3 {
		return SettingValidationError{
			field:  "Module",
			reason: "value length must be at least 3 runes",
		}
	}

	return nil
}

// SettingValidationError is the validation error returned by Setting.Validate
// if the designated constraints aren't met.
type SettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingValidationError) ErrorName() string { return "SettingValidationError" }

// Error satisfies the builtin error interface
func (e SettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingValidationError{}

var _Setting_ObjectId_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")

// Validate checks the field values on SettingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SettingRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingRequestValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SettingRequestValidationError is the validation error returned by
// SettingRequest.Validate if the designated constraints aren't met.
type SettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingRequestValidationError) ErrorName() string { return "SettingRequestValidationError" }

// Error satisfies the builtin error interface
func (e SettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingRequestValidationError{}

// Validate checks the field values on SettingUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SettingUpdateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingUpdateRequestValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Value

	return nil
}

// SettingUpdateRequestValidationError is the validation error returned by
// SettingUpdateRequest.Validate if the designated constraints aren't met.
type SettingUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingUpdateRequestValidationError) ErrorName() string {
	return "SettingUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SettingUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingUpdateRequestValidationError{}

// Validate checks the field values on SettingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SettingResponse) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetID()); l < 3 || l > 40 {
		return SettingResponseValidationError{
			field:  "ID",
			reason: "value length must be between 3 and 40 runes, inclusive",
		}
	}

	if !_SettingResponse_ID_Pattern.MatchString(m.GetID()) {
		return SettingResponseValidationError{
			field:  "ID",
			reason: "value does not match regex pattern \"[0-9a-z_-]{3,20}\"",
		}
	}

	if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingResponseValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Value

	// no validation rules for Updated

	return nil
}

// SettingResponseValidationError is the validation error returned by
// SettingResponse.Validate if the designated constraints aren't met.
type SettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingResponseValidationError) ErrorName() string { return "SettingResponseValidationError" }

// Error satisfies the builtin error interface
func (e SettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingResponseValidationError{}

var _SettingResponse_ID_Pattern = regexp.MustCompile("[0-9a-z_-]{3,20}")
